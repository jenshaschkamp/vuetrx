{
  "name": "fakeredis",
  "version": "0.3.1",
  "description": "Fake redis for testing, works as a drop-in replacement for node_redis",
  "keywords": [
    "test",
    "spec",
    "fake",
    "redis",
    "simulated",
    "implementation",
    "client"
  ],
  "author": {
    "name": "Hristo Dachev",
    "email": "tutini@gmail.com"
  },
  "main": "./main.js",
  "dependencies": {
    "redis": ">= 0.7"
  },
  "bugs": {
    "url": "http://github.com/hdachev/fakeredis/issues"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/hdachev/fakeredis.git"
  },
  "scripts": {
    "test": "./runtest"
  },
  "readme": "\n\n# fakeredis - a fake redis for node.js\n\nThis module provides easy-to-use simulated instances of Redis\nto which you appear to be connected via the\n[redis](https://github.com/mranney/node_redis) client by [Matt Ranney](https://github.com/mranney).\n**It helps with writing tests** in two ways:\nyour tests won't require an actual redis instance\nand you'll be able to safely run as many tests in parallel as you want.\n\n[![NPM Version](https://nodei.co/npm/fakeredis.png?downloads=true)](https://npmjs.org/package/fakeredis)\n[![Build Status](https://secure.travis-ci.org/hdachev/fakeredis.png?branch=master)](http://travis-ci.org/hdachev/fakeredis)\n\n\n## Usage\n\nInstall:\n\n    npm install fakeredis\n\nYou can use fakeredis as you would use node_redis,\njust changing the module name from `redis` to `fakeredis`:\n\n```javascript\nvar client = require(\"fakeredis\").createClient(port, host);\n```\n\nBoth parameters are optional,\nand only serve to determine if you want to reuse a an existing fakeredis instance or not.\nYou can also just name your backends arbitrarily:\n\n```javascript\n\n// Create a connection to a fresh fakeredis instance:\nvar client = fakeredis.createClient(\"social stuff\");\n\n// Connect to the same backend via another simulated connection:\nvar concurrentClient = fakeredis.createClient(\"social stuff\");\n```\n\nBy omitting both parameters,\nyou simply create a new blank slate fakeredis instance:\n\n```javascript\nvar client = require(\"fakeredis\").createClient();\n```\n\n\nIn other words,\nevery time you create a client specifying the same port and/or name\nyou reuse the same simulated backend.\nThis makes most sense when you need a concurrent client setup for some test,\nsay because you need to publish / subscribe,\nor because you want to test something that's based on `MULTI`/`EXEC`\nand uses optimistic locking with `WATCH`/`UNWATCH`.\n\nIn any case, fakeredis is great for testing\nbecause you can run as many tests in parallel as you wish,\nand that's also why you'll generally be naming your clients\nin a way that ensures tests don't collide.\n\n\n\n## Intended differences from a true Redis\n\nOne key difference is that the output of some commands,\nsuch as `SMEMBERS`, `HKEYS`, `HVALS`,\ncomes out sorted lexicographically to provide for simpler testing.\nThis means that some tests that make use of undocumented Redis behaviours\nsuch as the chronological order of retrieval for members in a set\nmay fail when attempted with fakeredis.\nTo solve this,\nwhenever there is no documented sort order for a given Redis command's multi-bulk reply,\nsort the output before asserting equality to ensure your tests run everywhere.\n\nAnother major difference is that commands that accept modifier parameters, such as\n`SORT key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern ...]] [ASC|DESC] [ALPHA] [STORE destination]`\ncurrently only accept these parameters in the order that is stated in the documentation.\nFor example,\nin Redis it appears to be perfectly legitimate to have `SORT myset ALPHA LIMIT 0 5`,\nbut in fakeredis this will currently return a syntax error.\n\nI'm totally open to discussion on both points.\n\n\n### Implemented subset:\n\nFakeredis is still mostly stuck in the Redis 2.4 era.\n\nAll Redis 2.4 string, list, hash, set and sorted set commands,\nmost keyspace commands, and some connection and server commands.\nPubsub, transactions with optimistic locking are also fully implemented.\n\nList of **available** commands:\n\nKeyspace:\n\n    DBSIZE\n    EXISTS\n    EXPIRE\n    EXPIREAT\n    FLUSHDB\n    KEYS\n    PERSIST\n    DEL\n    RANDOMKEY\n    RENAME\n    RENAMENX\n    SORT\n    TTL\n    TYPE\n\nStrings:\n\n    APPEND\n    DECR\n    DECRBY\n    GET\n    GETBIT\n    GETRANGE\n    GETSET\n    INCR\n    INCRBY\n    MGET\n    MSET\n    MSETNX\n    SET\n    SETBIT\n    SETEX\n    SETNX\n    SETRANGE\n\nHashes:\n\n    HDEL\n    HEXISTS\n    HGET\n    HGETALL\n    HINCRBY\n    HKEYS\n    HLEN\n    HMGET\n    HMSET\n    HSET\n    HSETNX\n    HVALS\n\nLists:\n\n    BLPOP\n    BRPOP\n    BRPOPLPUSH\n    LINDEX\n    LINSERT\n    LLEN\n    LPOP\n    LPUSH\n    LPUSHX\n    LRANGE\n    LREM\n    LSET\n    LTRIM\n    RPOP\n    RPOPLPUSH\n    RPUSH\n    RPUSHX\n\nSets:\n\n    SADD\n    SCARD\n    SDIFF\n    SDIFFSTORE\n    SINTER\n    SINTERSTORE\n    SISMEMBER\n    SMEMBERS\n    SMOVE\n    SPOP\n    SRANDMEMBER\n    SREM\n    STRLEN\n    SUNION\n    SUNIONSTORE\n\nSorted Sets:\n\n    ZADD\n    ZCARD\n    ZCOUNT\n    ZINCRBY\n    ZINTERSTORE\n    ZRANGE\n    ZRANGEBYSCORE\n    ZRANK\n    ZREM\n    ZREMRANGEBYRANK\n    ZREMRANGEBYSCORE\n    ZREVRANGE\n    ZREVRANGEBYSCORE\n    ZREVRANK\n    ZSCORE\n    ZUNIONSTORE\n\nPub/Sub:\n\n    PSUBSCRIBE\n    PUBLISH\n    PUNSUBSCRIBE\n    SUBSCRIBE\n    UNSUBSCRIBE\n\nTransactions:\n\n    DISCARD\n    EXEC\n    MULTI\n    UNWATCH\n    WATCH\n\nConnection and Server:\n\n    ECHO\n    PING\n    QUIT\n    SELECT\n\nThese do nothing but return `OK`:\n\n    AUTH\n    BGREWRITEAOF\n    BGSAVE\n    SAVE\n\n\n### What's missing:\n\nMost notably, there's no support for Lua scripting and `MONITOR` is still missing.\n\nNone of the `ready`, `connect`, `error`, `end`, `drain` and `idle`\nclient events are currently implemented.\n\nList of **missing** commands (will throw upon attempt to use):\n\nConnection and Server:\n\n    CONFIG GET\n    CONFIG SET\n    CONFIG RESETSTAT\n    DEBUG OBJECT\n    DEBUG SEGFAULT\n    FLUSHALL\n    INFO\n    LASTSAVE\n    MONITOR\n    MOVE\n    OBJECT\n    SHUTDOWN\n    SLAVEOF\n    SYNC\n\n\n## License\n\nMIT.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/hdachev/fakeredis",
  "_id": "fakeredis@0.3.1",
  "_from": "fakeredis@~0.3.0"
}
